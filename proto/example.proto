syntax="proto3";

package example;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/cwxstat/grpc-gateway-template/proto;example";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/cwxstat/grpc-gateway-template";
    description: "gRPC-gateway boilerplate repository";
  }
  schemes: HTTPS;
};

service NamespaceService {
  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/namespaces
      post: "/api/v1/namespaces"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a namespace"
      description: "Create a namespace on the cluster."
      tags: "Namespaces"
    };
  }
  rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/namespaces/{name}
      get: "/api/v1/namespaces/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a namespace by its name"
      description: "Gets a namespace from the cluster."
      tags: "Namespaces"
    };
  }
  rpc DeleteNamespace(GetNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      // Route to this method from DELETE requests to /api/v1/namespaces/{name}
      delete: "/api/v1/namespaces/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a namespace by its name"
      description: "Deletes a namespace from the cluster."
      tags: "Namespaces"
    };
  }
  rpc ListNamespaces(ListNamespaceRequest) returns (stream Namespace) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/namespaces
      get: "/api/v1/namespaces"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List namespaces"
      description: "List all namespaces in clusters"
      tags: "Namespaces"
    };
  }
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      // Route to this method from PATCH requests to /api/v1/namespaces/{namespace.name}
      patch: "/api/v1/namespaces/{namespace.name}"
      body: "namespace"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update the namespace"
      description: "Change properties of the namespace."
      tags: "Namespaces"
    };
  }



}

message CreateNamespaceRequest {
  string namespace = 1;
  google.protobuf.Struct metadata = 2;
}

message GetNamespaceRequest {
  string name = 1;
}

message UpdateNamespaceRequest {
  Namespace namespace = 1;
  google.protobuf.Struct metadata = 2;
  google.protobuf.FieldMask update_mask = 3;
}


message ListNamespaceRequest {}

message Namespace {
  // Name uniquely identifies a Namespace.
  string name = 1;
  // Output only
  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Struct metadata = 3;
}
